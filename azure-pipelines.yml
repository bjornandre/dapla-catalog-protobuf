name: $(Build.SourceBranch)-$(date:yyyyMMdd)$(rev:.r)
# Pipeline triggers on any branch and tag
trigger:
  branches:
    include:
      - '*'
  tags:
    include:
      - '*'

resources:
  containers:
    - container: ubuntu:latest
      image: maven:3-jdk-11
  repositories:
    - repository: templates
      type: github
      name: statisticsnorway/azure-pipelines-templates
      ref: refs/tags/0.0.3
      endpoint: statisticsnorway (6)

    # Pipeline will be run on this base image
pool:
  vmImage: 'ubuntu-latest'

# Variables global to this pipeline
# https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables
variables:
  # Variables defined in Pipelines->Library->Variable Groups in your project in
  # Azure Pipelines
  - group: Hemmeligheter
  # Variables defined here
  - name: fullSha
    value: '$(Build.SourceVersion)'
  - name: imageName
    value: 'eu.gcr.io/prod-bip/ssb/dapla/dapla-catalog-protobuf'
  - name: repoName
    value: 'prod-bip/ssb/dapla/dapla-catalog-protobuf'
  - name:  MAVEN_CACHE_FOLDER
    value: $(Pipeline.Workspace)/.m2/repository
  - name: MAVEN_OPTS
    value: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'



# Job which runs mvn test and verify, Sonar Analysis (if branch is master), mvn install,
# builds Docker image, pushes this to GCR and checks for any image vulnerabilities
jobs:
  - job: buildTestDockerBuildDockerPush
    displayName: 'Test/build app and Dockerimage'
    # Job condition: Run these jobs on any branch, but not on tags
    condition: not(startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    # Steps in this Job
    steps:
      # Authenticate Maven to Nexus using predefined Service Connections
      # (Project Settings->Pipelines->Service Connections)
      - task: MavenAuthenticate@0
        displayName: 'Maven authenticate'
        inputs:
          mavenServiceConnections: 'mvnSsbBipPublic, mvnSsbBipReleases, mvnSsbBipSnapshots'

      #Maven caching to speed up pipeline build time
      - task: Cache@2
        displayName: Cache Maven local repo
        inputs:
          key: 'maven | "$(Agent.OS)" | **/pom.xml'
          restoreKeys: |
            maven | "$(Agent.OS)"
            maven
          path: $(MAVEN_CACHE_FOLDER)

      - template: ${{variables['System.DefaultWorkingDirectory']}}/maven/task-test-and-verify.yml

      - template: ${{variables['System.DefaultWorkingDirectory']}}/maven/task-sonar-analyze.yml

      - template: ${{variables['System.DefaultWorkingDirectory']}}/maven/task-install-and-deploy-to-nexus.yml

      - template: ${{variables['System.DefaultWorkingDirectory']}}/docker/docker-build-image-and-push-to-gcr.yml
        parameters:
          project: ${{ parameters.project }}
          imageName: ${{ parameters.imageName }}

  # Job which pulls the Docker image with the correct tag (image-scan-tag) from GCR, tags this
  # with the git tag, and pushes that back to GCR.
  # The job triggers when any tag was committed to GitHub, which means all tags in
  # the code repo are propagated to the corresponding (newly built) image in GCR.
  - template: docker/docker-tag-for-production.yml@templates
    parameters:
      tagToTag: dapla-catalog-protobuf
      gcrImageName: ${{ variables.imageName }}